using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Google.GData.Spreadsheets;
using System.Globalization;
using System.Threading;

namespace WhoaGDriveToHardcoded
{
    class Program
    {
        static string WhoaScriptsFolderPath = @"e:\Documents\UnityProjects\Whoa\Assets\Scripts\Whoa\";
        static string DriveUrl = "14Xi5jjCzV7BFX1cNz4ezisGnQI7qgNtTCnV3kWbMiGs";

        static void Main(string[] args)
        {
            Thread.CurrentThread.CurrentCulture = new CultureInfo("es-ES");

            // CHARACTERS
            List<string> charactersAndUpgradesStrings = new List<string>();
            ListFeed list = GDriveManager.GetSpreadsheet(DriveUrl, 1);
            foreach (ListEntry row in list.Entries)
            {
                string name = row.Elements[0].Value;
                float multiplier = float.Parse(row.Elements[1].Value);
                int health = int.Parse(row.Elements[2].Value);
                int klid = int.Parse(row.Elements[3].Value);
                float klidRegen = float.Parse(row.Elements[4].Value);
                float speed = float.Parse(row.Elements[5].Value);
                float whoaPower = float.Parse(row.Elements[6].Value);
                float mass = float.Parse(row.Elements[7].Value);
                int spellSlots = int.Parse(row.Elements[8].Value);
                int price = int.Parse(row.Elements[9].Value);
                charactersAndUpgradesStrings.Add(String.Format("\n\n//{0}\nWhoaCharacter {0} = new WhoaCharacter({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9});\ncharacters.Add({0});", name, multiplier, health, whoaPower, speed, mass, klid, klidRegen, spellSlots, price));
            }
            
            ListFeed upgradesList = GDriveManager.GetSpreadsheet(WhoaPlayerProperties.DRIVE_DOCUMENT_URL, 2);
            foreach (ListEntry row in upgradesList.Entries)
            {
                int id = int.Parse(row.Elements[0].Value);
                if (id == -1)
                {
                    upgrade.Effects.Add(parseEffect(row));
                }
                else
                {
                    currentlyUpgradedCharacter = characters[id];

                    string name = row.Elements[1].Value;
                    int maxLevel = int.Parse(row.Elements[2].Value);
                    int basePrice = int.Parse(row.Elements[3].Value);
                    float priceMultiplier = float.Parse(row.Elements[4].Value);
                    upgrade = new CharacterUpgrade(name, maxLevel, basePrice, priceMultiplier);

                    upgrade.Effects.Add(parseEffect(row));

                    currentlyUpgradedCharacter.AddUpgrade(upgrade);
                }
            }

            ReplaceAutoGenerated(WhoaScriptsFolderPath + "WHOATESTING.txt", charactersAndUpgradesStrings);
            

            // Keep the console window open in debug mode.
            Console.WriteLine("Press any key to exit.");
            Console.ReadKey();
        }

        private string parseEffect(ListEntry row)
        {
            int indexOffset = 5;

            EffectAffectedProperty affectedProperty = (EffectAffectedProperty)Enum.Parse(typeof(EffectAffectedProperty), row.Elements[indexOffset].Value);
            EffectMethod effectMethod = (EffectMethod)Enum.Parse(typeof(EffectMethod), row.Elements[indexOffset + 1].Value);

            indexOffset += 2;

            float[] modifiers = new float[10];
            for (int x = 0; x < 10; x++)
                modifiers[x] = float.Parse(row.Elements[x + indexOffset].Value);

            return new UpgradeEffect(affectedProperty, effectMethod, modifiers);
        }

        public static void ReplaceAutoGenerated(string path, IEnumerable<string> newLines)
        {
            List<string> lines = new List<string>(File.ReadAllLines(path));

            int erasingStartedIndex = 0;
            int erasingStoppedIndex = 0;

            for (int index = 0; index < lines.Count; index++)
            {
                string line = lines[index];

                if (line == "// AUTO GENERATED START")
                    erasingStartedIndex = index + 1;

                if (line == "// AUTO GENERATED END")
                    erasingStoppedIndex = index;
            }

            lines.RemoveRange(erasingStartedIndex, erasingStoppedIndex - erasingStartedIndex);

            lines.InsertRange(erasingStartedIndex, newLines);

            File.WriteAllLines(path, lines.ToArray());
        }
    }
}
